"""
The backend and algorithm registries.
"""

# Registry class:

class Registry:
    """Registry that keeps track of registered objects."""

    def __init__(self, obj_name, defaults=None, generators=None, aliases=None):
        self.obj_name = obj_name
        self.registered = defaults ?? {}
        self.generators = generators ?? {}
        self.aliases = aliases ?? {}
        self.no_conflict_registries = []

    def shouldnt_conflict_with(self, registry):
        """Add the given registry to the no conflict registries."""
        self.no_conflict_registries.append(registry)

    def __getitem__(self, name):
        name = self.aliases.get(name, name)
        match {==name: value, **_} in self.registered:
            return value
        else: if name in self.generators:
            return self.run_gen(name)
        else:
            for registry in self.no_conflict_registries:
                if name in registry:
                    raise ValueError(f"invalid {self.obj_name}: {name} ({name} is a(n) {registry.obj_name} not a(n) {self.obj_name})")
            valid_names = ", ".join(repr(name) for name in self)
            raise ValueError(f"unknown {self.obj_name}: {name} (valid {self.obj_name}s: {valid_names})")

    def get(self, name, default=None):
        """Attempt to __getitem__ else default."""
        try:
            return self[name]
        except ValueError, TypeError:
            return default

    def register(self, name, value, replace=False):
        """Register value under the given name."""
        if not replace:
            match {==name: stored_val, **_} in self.registered:
                if stored_val == value:
                    return
                else:
                    raise ValueError(f"cannot change registry for already existing name: {name}")
        if name in self.aliases:
            raise ValueError(f"cannot register name with existing alias: {name}")
        for registry in self.no_conflict_registries:
            if name in registry:
                raise ValueError(f"cannot register name with conflicting {registry.obj_name}: {name}")
        self.registered[name] = value

    def register_alias(self, name, alias, replace=False):
        """Register an alias for the given name."""
        if not replace:
            match {==name: stored_alias, **_} in self.aliases:
                if stored_alias == alias:
                    return
                else:
                    raise ValueError(f"cannot change registry for already existing alias: {alias}")
        if alias in self.registered:
            raise ValueError(f"cannot register overlapping alias: {alias}")
        for registry in self.no_conflict_registries:
            if name in registry:
                raise ValueError(f"cannot register alias with conflicting {registry.obj_name}: {alias}")
        self.aliases[alias] = name

    def run_gen(self, name):
        """Run the generator for the given name."""
        value = self.generators[name]()
        if value is not None:
            self.register(name, value)
        del self.generators[name]
        return self.registered[name]

    def __iter__(self):
        yield from self.registered
        yield from self.generators
        yield from self.aliases

    def __contains__(self, name) =
        name in self.registered or name in self.generators or name in self.aliases

    def run_all_gens(self):
        """Run all generators."""
        for name in self.generators:
            self.run_gen(name)

    def items(self):
        """Get all items in the registry as (name, value) pairs."""
        self.run_all_gens()
        yield from self.registered.items()

    def asdict(self):
        """Convert registry to dictionary."""
        self.run_all_gens()
        return self.registered


# Registries:

backend_registry = Registry("backend")

alg_registry = Registry("algorithm")

meta_registry = Registry("meta algorithm")

alg_registry.shouldnt_conflict_with(meta_registry)
meta_registry.shouldnt_conflict_with(alg_registry)
