"""
BBopt command line interface.
"""

import os
import sys
import argparse
import subprocess
from pprint import pprint

if sys.version_info >= (3, 3):
    from concurrent.futures.process import BrokenProcessPool
else:
    BrokenProcessPool = KeyboardInterrupt

from bbopt import constants
from bbopt.optimizer import BlackBoxOptimizer


parser = argparse.ArgumentParser(
    prog="bbopt",
    description=constants.description,
)

parser.add_argument(
    "file",
    metavar="file",
    type=str,
    help="path to the Python file to run",
)

parser.add_argument(
    "-n", "--num-trials",
    metavar="trials",
    type=int,
    default=constants.default_trials,
    help=f"number of trials to run (defaults to {constants.default_trials})",
)

parser.add_argument(
    "-j", "--jobs",
    metavar="processes",
    type=int,
    default=constants.default_jobs,
    help=f"number of processes to use (defaults to {constants.default_jobs})",
)

parser.add_argument(
    "-q", "--quiet",
    action="store_true",
    help="suppress all informational output",
)

parser.add_argument(
    "--python",
    metavar="executable",
    type=str,
    default=sys.executable,
    help="the python executable to use (defaults to the current python)"
)

parser.add_argument(
    "--args",
    type=str,
    nargs=argparse.REMAINDER,
    help="arguments to pass to the file being run",
)

parser.add_argument(
    "-v", "--version",
    action="version",
    version="%(prog)s " + constants.version,
)


def base_show(quiet, msg):
    """Show the given message with [BBopt] if not quiet."""
    if not quiet:
        print("[BBopt]", msg)


def run_trial(args, cmd, i):
    """Pickleable function for running trials in parallel."""
    try:
        show = base_show$(args.quiet)

        show(f"{i+1}/{args.num_trials} starting...")

        sub_proc_env = os.environ.copy()
        sub_proc_env[py_str(constants.run_id_env_var)] = py_str(i)
        subprocess.check_call(cmd, env=sub_proc_env)

        show(f"{i+1}/{args.num_trials} finished.")

    except BrokenProcessPool as err:
        raise KeyboardInterrupt(str(err))


def main(*args, **kwargs):
    args = parser.parse_args(*args, **kwargs)
    if not os.path.isfile(args.file):
        raise ValueError(f"could not find file {args.file}")

    show = base_show$(args.quiet)
    cmd = [args.python, args.file] + (args.args ?? [])

    cmd_str = " ".join(cmd)
    show(f"Running {args.num_trials} trials using {args.jobs} process(es) of:\n\t> {cmd_str}")

    if args.jobs <= 1:
        range(args.num_trials) |> map$(run_trial$(args, cmd)) |> consume
    else:
        with parallel_map.multiple_sequential_calls(max_workers=args.jobs):
            range(args.num_trials) |> parallel_map$(run_trial$(args, cmd)) |> consume

    if not args.quiet:
        bb = BlackBoxOptimizer(args.file)
        rel_data_file = os.path.relpath(bb.data_file)
        show(f"Black box optimization finished; data saved to {rel_data_file}.")

        best_example = bb.get_best_run()
        show("Summary of best run:")
        pprint(bb.get_best_run())
