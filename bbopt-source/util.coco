"""
Utilities for use across all of bbopt.
"""

import os
import sys
from collections.abc import Mapping, Iterable
from contextlib import contextmanager
from functools import wraps

import numpy as np
from portalocker import Lock

from bbopt import constants


Num = (int, float)
Str = (str, py_str)


def norm_path(path) =
    """Normalize the given path."""
    (path
    |> os.path.expanduser
    |> os.path.abspath
    |> os.path.realpath
    |> os.path.normcase)


def isnumpy(obj):
    """Determines if obj is a numpy scalar."""
    return type(obj).__module__ == "numpy" and np.isscalar(obj)


def denumpy(obj, fallback=None):
    """Convert numpy data types to their Python equivalents."""
    # the ordering here is extremely important; float must
    #  come before int and int must come before bool
    if np.issubdtype(obj, np.complexfloating):
        return complex(obj)
    if np.issubdtype(obj, np.floating):
        return float(obj)
    if np.issubdtype(obj, np.signedinteger) or np.issubdtype(obj, np.unsignedinteger):
        return int(obj)
    if np.issubdtype(obj, np.bool_):
        return bool(obj)
    if np.issubdtype(obj, np.str_) or np.issubdtype(obj, np.unicode_):
        return str(obj)
    if fallback is not None:
        fallback()
    return obj


def denumpy_all(obj):
    """Recursively apply denumpy to the given obj."""
    if isinstance(obj, (list, tuple)):
        return obj |> fmap$(denumpy_all)
    elif isinstance(obj, dict):
        return {
            denumpy_all(k): denumpy_all(v)
            for k, v in obj.items()
        }
    elif isnumpy(obj):
        return denumpy(obj)
    else:
        return obj


def json_serialize(obj):
    """Serialize obj for encoding in JSON."""
    if obj is None or isinstance(obj, (int, float, bool, str)):
        return obj
    if isinstance(obj, bytes):
        return str(obj, encoding="utf-8")
    if isinstance(obj, Mapping):
        serialized_dict = {}
        for k, v in obj.items():
            serialized_k = json_serialize(k)
            if not isinstance(serialized_k, str):
                raise TypeError(f"dict keys must be strings, not {k}")
            serialized_dict[k] = json_serialize(v)
        return serialized_dict
    if isinstance(obj, Iterable):
        serialized_list = []
        for x in obj:
            serialized_list.append(json_serialize(x))
        return serialized_list
    if isnumpy(obj):
        return denumpy(obj, fallback=(def -> raise TypeError(f"cannot JSON serialize numpy dtype {obj.dtype}")))
    raise TypeError(f"cannot JSON serialize {obj}")


def sorted_items(params) =
    """Return an iterator of the dict's items sorted by its keys."""
    sorted(params.items())


def sorted_examples(examples) =
    """Sort examples by their timestamp."""
    sorted(examples, key=.["timestamp"])


def running_best(examples):
    """Yield running best examples seen at each point."""
    best_example = max_gain = min_loss = None
    for example in examples:

        match example:
            case {"values": values, "gain": gain, **_}:
                if min_loss is not None:
                    raise ValueError("cannot have examples with maximize and examples with minimize")
                if max_gain is None or gain >= max_gain:
                    best_example = example
                    max_gain = gain

            case {"values": values, "loss": loss, **_}:
                if max_gain is not None:
                    raise ValueError("cannot have examples with maximize and examples with minimize")
                if min_loss is None or loss <= min_loss:
                    best_example = example
                    min_loss = loss

        else:
            raise ValueError(f"invalid example {example}")

        yield best_example


def best_example(examples):
    """Return the best example seen so far."""
    best = consume(running_best(examples), keep_last=1)
    if best:
        assert len(best) == 1, f"{len(best)} != 1"
        return best[0]
    else:
        return {"values": {}}


def all_isinstance(objs, types) =
    """Return whether all the objects have the desired type(s)."""
    objs |> map$(isinstance$(?, types)) |> all


def format_err(Error, message, obj) =
    """Creates an error with a formatted error message."""
    Error(message + ": " + repr(obj))


def sync_file(file_handle):
    """Forcibly flush and sync the given file."""
    file_handle.flush()
    os.fsync(file_handle.fileno())


def ensure_file(fpath):
    """Ensure that the given file exists."""
    if sys.version_info >= (3,):
        try:
            with open(fpath, "x"):
                pass
        except FileExistsError:
            pass
    else:
        with open(fpath, "a"):
            pass


def clear_file(file_handle):
    """Empties the contents of the given file."""
    file_handle.seek(0)
    file_handle.truncate()


def plot(
    xs,
    ys,
    ax=None,
    yscale=None,
    title=None,
    label=None,
    xlabel=None,
    ylabel=None,
    marker=".",
    markersize=12,
    linewidth=2,
    grid=True,
):
    """Construct a matplotlib plot with the given parameters."""
    if ax is None:
        from matplotlib import pyplot as plt
        ax = plt.gca()
    if title is not None:
        ax.set_title(title)
    if xlabel is not None:
        ax.set_xlabel(xlabel)
    if ylabel is not None:
        ax.set_ylabel(ylabel)
    if grid:
        ax.grid()
    if yscale is not None:
        ax.set_yscale(yscale)
    ax.plot(xs, ys, label=label, marker=marker, markersize=markersize, linewidth=linewidth)
    return ax


@contextmanager
def open_with_lock(fpath, mode="rb+", timeout=None, **kwargs):
    """Open file with lock."""
    if timeout is None:
        timeout = constants.lock_timeout
    with Lock(fpath, mode, timeout=timeout, **kwargs) as file_handle:
        try:
            yield file_handle
        finally:
            file_handle.flush()
            if "w" in mode or "+" in mode or "a" in mode:
                try:
                    os.fsync(file_handle.fileno())
                except OSError:
                    pass


def convert_match_errors(func):
    """Re-raise MatchErrors as TypeErrors."""
    @wraps(func)
    def match_errors_converted_func(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except MatchError as err:
            func_name = getattr(func, "__qualname__", func.__name__)
            raise TypeError(f"arguments did not match call signature for function {func_name}") from err
    return match_errors_converted_func


def printerr(*args):
    """Print to stderr."""
    print(*args, file=sys.stderr)


class ListProxy:
    """Behaves like new_list, but appends new elements to old_list."""

    def __init__(self, old_list, new_list):
        self.old_list = old_list
        self.new_list = new_list

    def __iter__(self):
        yield from self.new_list

    def __getitem__(self, index) =
        self.new_list[index]

    def append(self, obj):
        self.new_list.append(obj)
        if obj not in self.old_list:
            self.old_list.append(obj)

    def __setitem__(self, index, obj):
        self.new_list[index] = obj
        if obj not in self.old_list:
            self.old_list.append(obj)

    def __repr__(self) =
        f"ListProxy(\n\t{self.old_list=},\n\t{self.new_list=},\n)"


class DictProxy:
    """Behaves like new_dict, but adds new keys to old_dict."""

    def __init__(self, old_dict, new_dict):
        self.old_dict = old_dict
        self.new_dict = new_dict

    def __iter__(self):
        yield from self.new_dict

    def items(self) =
        self.new_dict.items()

    def keys(self) =
        self.new_dict.keys()

    def values(self) =
        self.new_dict.values()

    def __getitem__(self, key):
        value = self.new_dict[key]
        if key not in self.old_dict:
            self.old_dict[key] = value
        return value

    def __setitem__(self, key, value):
        self.new_dict[key] = value
        if key not in self.old_dict:
            self.old_dict[key] = value

    def __repr__(self) =
        f"DictProxy(\n\t{self.old_dict=},\n\t{self.new_dict=},\n)"


match def mean([] + xs) =
    sum(xs) / len(xs)

addpattern def mean(() :: xs) =
    """Compute the arithmetic mean of the given sequence."""
    xs |> tuple |> mean


def median(xs):
    """Compute the median of the given sequence."""
    sorted_xs = xs |> sorted |> tuple
    return mean((
        sorted_xs[len(sorted_xs)//2],
        sorted_xs[(len(sorted_xs) + 1)//2],
    ))
