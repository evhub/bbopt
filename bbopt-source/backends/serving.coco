"""
The serving backend. Selects the best existing data point.
"""

from bbopt.util import best_example
from bbopt.backends.util import Backend


# Backend:

class ServingBackend(Backend):
    """The serving backend uses the parameter values from the best example."""
    backend_name = "serving"

    @override
    def attempt_update(self, examples, params, allow_missing_data=False):
        """Update the serving backend with new parameters."""
        # since we're serving, ignore params and just extract the best example
        self.current_values = best_example(examples)["values"]

        # set new allow_missing_data and call init_fallback_backend if necessary
        self.allow_missing_data = allow_missing_data
        if not self.fallback_backend and self.allow_missing_data:
            self.init_fallback_backend()

        return True

    @override
    def fallback_func(self, name, func, *args, **kwargs):
        if self.allow_missing_data:
            return super().fallback_func(name, func, *args, **kwargs)
        else:
            raise ValueError(f"missing data for parameter {name} while serving and no guess")


# Registered names:

ServingBackend.register()

# allow_missing_data=False not included to help bb._backend_store
ServingBackend.register_alg(None)
ServingBackend.register_alg("serving")

ServingBackend.register_alg("max_greedy", allow_missing_data=True)
