"""
The scikit-optimize backend. Does black box optimization using scikit-optimize.
"""

from functools import wraps

from skopt import Optimizer
from skopt.space import (
    Categorical,
    Integer,
    Real,
)

from bbopt.util import sorted_items
from bbopt.backends.util import (
    StandardBackend,
    split_examples,
    make_values,
)


# attempt to fix skopt errors by patching sklearn
try:
    import sklearn
except ImportError:
    pass
else:

    # patch sklearn.utils.optimize._check_optimize_result
    try:
        old_check_optimize_result = sklearn.utils.optimize._check_optimize_result

        @wraps(old_check_optimize_result)
        def new_check_optimize_result(solver, result, *args, **kwargs):
            if not isinstance(result.message, bytes):
                result.message = result.message.encode("latin1")
            return old_check_optimize_result(solver, result, *args, **kwargs)

        sklearn.utils.optimize._check_optimize_result = new_check_optimize_result
        sklearn.gaussian_process._gpr._check_optimize_result = new_check_optimize_result
    except AttributeError:
        pass

    # patch sklearn.utils.fixes.sp_version
    try:
        sklearn.utils.fixes.sp_version < (1,)
    except TypeError:
        Version = type(sklearn.utils.fixes.sp_version)
        old_lt = Version.__lt__
        old_le = Version.__le__
        old_gt = Version.__gt__
        old_ge = Version.__ge__
        try:
            def Version.__lt__(self, other):
                try:
                    result = old_lt(self, other)
                except TypeError, NotImplementedError:
                    result = NotImplemented
                if result is NotImplemented:
                    return self.release < other
                else:
                    return result
            def Version.__le__(self, other):
                try:
                    result = old_le(self, other)
                except TypeError, NotImplementedError:
                    result = NotImplemented
                if result is NotImplemented:
                    return self.release <= other
                else:
                    return result
            def Version.__gt__(self, other):
                try:
                    result = old_gt(self, other)
                except TypeError, NotImplementedError:
                    result = NotImplemented
                if result is NotImplemented:
                    return self.release > other
                else:
                    return result
            def Version.__ge__(self, other):
                try:
                    result = old_ge(self, other)
                except TypeError, NotImplementedError:
                    result = NotImplemented
                if result is NotImplemented:
                    return self.release >= other
                else:
                    return result
        except TypeError:
            pass


# Utilities:

def guess_n_initial_points(params) =
    """Guess a good value for n_initial_points given params."""
    max(
        len(params),
        min(len(params) * 2, 10),
    )


def create_space(name, func, *args):
    """Create a scikit-optimize space for the given parameter."""
    name = py_str(name)
    match func, args:
        case "choice", (choices,):
            return Categorical(choices, name=name)
        case "randrange", (start, stop, step):
            if step != 1:
                raise ValueError("the scikit-optimize backend only supports a randrange step size of 1")
            stop -= 1  # scikit-optimize ranges are inclusive
            return Integer(start, stop, name=name)
        case "uniform", (a, b):
            return Real(a, b, name=name)
    raise TypeError(f"invalid parameter {name}")


def create_dimensions(params) =
    """Construct the full optimization space for the given parameters."""
    [
        create_space(name, func, *args)
        for name, (func, args, kwargs) in sorted_items(params)
    ]


# Backend:

class SkoptBackend(StandardBackend):
    """The scikit-optimize backend uses scikit-optimize for black box optimization."""
    backend_name = "scikit-optimize"
    implemented_funcs = (
        # should match create_space above
        "choice",
        "randrange",
        "uniform",
    )

    @override
    def setup_backend(self, params, base_estimator="GP", n_initial_points=None, **options):
        """Special method to initialize the backend from params."""
        self.params = params
        if isinstance(base_estimator, str):
            base_estimator = py_str(base_estimator)
        if n_initial_points is None:
            n_initial_points = guess_n_initial_points(params)
        self.optimizer = Optimizer(
            create_dimensions(params),
            base_estimator,
            n_initial_points=n_initial_points,
            **options,
        )

    @override
    def tell_examples(self, new_examples):
        """Special method that allows fast updating of the backend with new examples."""
        data_points, losses = split_examples(new_examples, self.params)
        self.result = self.optimizer.tell(data_points, losses)

        current_point = self.optimizer.ask()
        self.current_values = make_values(self.params, current_point)

    @property
    def space(self) =
        """The space over which optimization was performed."""
        self.optimizer.space

    @property
    def model(self) =
        """Get the most recently fit model."""
        self.optimizer.models[-1]


# Registered names:

SkoptBackend.register()
SkoptBackend.register_alias("skopt")

SkoptBackend.register_alg("gaussian_process", base_estimator="GP")
SkoptBackend.register_alg("random_forest", base_estimator="RF")
SkoptBackend.register_alg("extra_trees", base_estimator="ET")
SkoptBackend.register_alg("gradient_boosted_regression_trees", base_estimator="GBRT")

SkoptBackend.register_meta_for_all_algs("any_skopt")
