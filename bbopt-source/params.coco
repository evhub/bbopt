"""
Handles standardizing param calls to use standard library random functions.
"""

from collections.abc import Iterable
from math import pi, log as ln

from bbopt import constants
from bbopt.util import (
    Num,
    format_err,
    all_isinstance,
    denumpy_all,
    printerr,
)


# Handlers:

def handle_randrange(args):
    if not all_isinstance(args, int):
        raise format_err(ValueError, "arguments to randrange must be integers, not", args)
    if len(args) == 1:
        start, stop, step = 0, args[0], 1
    elif len(args) == 2:
        start, stop, step = args[0], args[1], 1
    elif len(args) == 3:
        start, stop, step = args
    else:
        raise format_err(ValueError, "randrange expects between 1 and 3 arguments, not", args)
    if start > stop:
        raise format_err(ValueError, "randrange start must be less than stop")
    return [start, stop, step]


def handle_choice(args):
    if len(args) != 1 or not isinstance(args[0], Iterable):
        raise format_err(ValueError, "invalid arguments to choice", args)
    return (list(args[0]),)


def handle_uniform(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to uniform", args)


def handle_triangular(args):
    if len(args) != 3 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to triangular", args)


def handle_betavariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to betavariate", args)


def handle_expovariate(args):
    if len(args) != 1 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to expovariate", args)


def handle_gammavariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to gammavariate", args)


def handle_normalvariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to normalvariate", args)


def handle_vonmisesvariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to vonmisesvariate", args)


def handle_paretovariate(args):
    if len(args) != 1 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to paretovariate", args)


def handle_weibullvariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to weibullvariate", args)


# Placeholders:

def placeholder_randrange(start, stop, step) =
    rng = range(start, stop, step)
    rng[len(rng)//2]


def placeholder_choice(choices) =
    choices[len(choices)//2]


def placeholder_uniform(start, stop) =
    (start + stop)/2


def placeholder_triangular(low, high, mode) =
    mode


def placeholder_betavariate(alpha, beta) =
    alpha/(alpha + beta)


def placeholder_expovariate(lambd) =
    1/lambd


def placeholder_gammavariate(alpha, beta) =
    alpha/beta


def placeholder_normalvariate(mu, sigma) =
    mu


def placeholder_vonmisesvariate(mu, kappa) =
    mu


def placeholder_paretovariate(alpha) =
    1 if alpha <= 1 else alpha/(alpha - 1)


def placeholder_weibullvariate(alpha, beta) =
    alpha * ln(2)**(1/beta)


# Support checkers:


def support_check_randrange(val, start, stop, step) =
    val in range(start, stop, step)


def support_check_choice(val, choices) =
    val in choices


def support_check_uniform(val, start, stop) =
    start <= val <= stop or stop <= val <= start


def support_check_triangular(val, low, high, mode) =
    low <= val <= high


def support_check_betavariate(val, alpha, beta) =
    0 <= val <= 1


def support_check_expovariate(val, lambd) =
    val >= 0 if lambd >= 0 else val <= 0


def support_check_gammavariate(val, alpha, beta) =
    val > 0


def support_check_normalvariate(val, mu, sigma) =
    True


def support_check_vonmisesvariate(val, mu, kappa) =
    0 <= val <= 2*pi


def support_check_paretovariate(val, alpha) =
    val >= 1


def support_check_weibullvariate(val, alpha, beta) =
    val >= 0


# Processor:

class ParamProcessor:
    """Processes param keyword arguments."""

    def __init__(self):
        self.handlers = {}
        self.placeholder_funcs = {}
        self.support_checkers = {}

    def register(self, func, handler, placeholder_generator, support_check_func, replace=False):
        """Register a new parameter definition function. See bbopt.params for examples."""
        if not replace and func in self.handlers:
            raise ValueError(f"cannot register already existing parameter definition function {func!r}")
        self.handlers[func] = handler
        self.placeholder_funcs[func] = placeholder_generator
        self.support_checkers[func] = support_check_func

    def in_support(self, name, val, func, *args, **kwargs):
        if func not in self.support_checkers:
            raise ValueError(f"unknown parameter definition function {func} (register with bbopt.params.param_processor.register)")
        return self.support_checkers[func](val, *args)

    def verify_support(self, name, val, func, *args, **kwargs):
        if not self.in_support(name, val, func, *args, **kwargs):
            printerr(f"BBopt Warning: {val} not in support of {func}(*{args}) for parameter {name} (adjust parameter definition to ensure support is always maximally broad)")
            if constants.use_placeholder_when_outside_support:
                val = kwargs.get("placeholder_when_missing", self.choose_default_placeholder(name, func, *args, **kwargs))
        return val

    def modify_kwargs(self, func, kwargs):
        """Apply func to all kwargs with values in the random function's domain."""
        new_kwargs = {}
        for k, v in kwargs.items():
            if k in self.handlers:
                new_kwargs[k] = map(func, v)
            else:
                new_kwargs[k] = func(v)
        return new_kwargs

    def standardize_args(self, func, args):
        """Standardize param func and args."""
        # denumpy args
        args = denumpy_all(args)

        # detect invalid funcs
        if func not in self.handlers:
            raise ValueError(f"unknown parameter definition function {func} (register with bbopt.params.param_processor.register)")

        # run handler
        result = self.handlers[func](args)
        args = result if result is not None else args

        # standardize arguments to a list
        return list(args)

    def standardize_kwargs(self, kwargs):
        """Standardizes param keyword args."""
        return kwargs |> fmap$((k, v) -> denumpy_all((k, v)))

    def choose_default_placeholder(self, name, func, *args, **kwargs):
        """Choose a default placeholder_when_missing value for the given parameter."""
        if func not in self.placeholder_funcs:
            raise ValueError(f"unknown parameter definition function {func} (register with bbopt.params.param_processor.register)")
        return self.placeholder_funcs[func](*args)


# Registration:

param_processor = ParamProcessor()

param_processor.register("randrange", handle_randrange, placeholder_randrange, support_check_randrange)
param_processor.register("choice", handle_choice, placeholder_choice, support_check_choice)
param_processor.register("uniform", handle_uniform, placeholder_uniform, support_check_uniform)
param_processor.register("triangular", handle_triangular, placeholder_triangular, support_check_triangular)
param_processor.register("betavariate", handle_betavariate, placeholder_betavariate, support_check_betavariate)
param_processor.register("expovariate", handle_expovariate, placeholder_expovariate, support_check_expovariate)
param_processor.register("gammavariate", handle_gammavariate, placeholder_gammavariate, support_check_gammavariate)
param_processor.register("normalvariate", handle_normalvariate, placeholder_normalvariate, support_check_normalvariate)
param_processor.register("vonmisesvariate", handle_vonmisesvariate, placeholder_vonmisesvariate, support_check_vonmisesvariate)
param_processor.register("paretovariate", handle_paretovariate, placeholder_paretovariate, support_check_paretovariate)
param_processor.register("weibullvariate", handle_weibullvariate, placeholder_weibullvariate, support_check_weibullvariate)
